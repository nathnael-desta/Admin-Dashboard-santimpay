{"ast":null,"code":"import LoginPage from \"./components/LoginPage.vue\";\nimport Dashboard from \"./components/Dashboard.vue\";\nexport default {\n  name: \"App\",\n  components: {\n    LoginPage,\n    Dashboard\n  },\n  data() {\n    return {\n      users: [],\n      currentInput: {\n        accountName: \"\",\n        accountPassword: \"\"\n      },\n      userIndex: NaN,\n      pageNo: 1\n    };\n  },\n  created() {\n    this.getPages();\n  },\n  computed: {\n    user() {\n      return users[this.userIndex];\n    }\n  },\n  methods: {\n    async getPages() {\n      let res = await fetch(\"users.json\");\n      let data = await res.json();\n      this.users = data;\n    },\n    checkUser(name, pass) {\n      this.users.forEach((user, index) => {\n        let correctInput = false;\n        if ((user.email == name || user.phoneNumber == name) && user.password == pass) {\n          this.userIndex = index;\n          correctInput = true;\n        }\n        if (!correctInput) {\n          alert(\"incorrect input\");\n        } else {\n          this.pageNo = 1;\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["LoginPage","Dashboard","name","components","data","users","currentInput","accountName","accountPassword","userIndex","NaN","pageNo","created","getPages","computed","user","methods","res","fetch","json","checkUser","pass","forEach","index","correctInput","email","phoneNumber","password","alert"],"sources":["/home/nate/Documents/repos/Admin-Dashboard-santimpay/admin-dashboard/src/App.vue"],"sourcesContent":["<template v-if=\"users\">\n    <login-page\n      :current-input=\"currentInput\" \n      :check-user= \"checkUser\"\n      v-if=\"pageNo == 0\"\n    ></login-page>\n    <dashboard\n      :user=\"user\"\n    ></dashboard>\n</template>\n\n<script>\nimport LoginPage from \"./components/LoginPage.vue\";\nimport Dashboard from \"./components/Dashboard.vue\";\n\nexport default {\n    name: \"App\",\n    components: {\n        LoginPage,\n        Dashboard\n    },\n    data() {\n        return {\n            users: [],\n            currentInput: {\n              accountName: \"\",\n              accountPassword: \"\"\n            },\n            userIndex: NaN,\n            pageNo: 1\n        };\n    },\n    created() {\n      this.getPages();\n    },\n    computed: {\n      user() {\n        return users[this.userIndex]\n      }\n    },\n    methods: {\n        async getPages() {\n            let res = await fetch(\"users.json\");\n            let data = await res.json();\n\n            this.users = data;\n        },\n        checkUser(name, pass) {\n          this.users.forEach((user, index) => {\n            let correctInput = false;\n            if ((user.email == name || user.phoneNumber == name) && user.password == pass) {\n              this.userIndex = index;\n              correctInput = true;\n            }\n\n            if(!correctInput) {\n              alert(\"incorrect input\")\n            } else {\n              this.pageNo = 1;\n            }\n          })\n        }\n    },\n};\n</script>\n"],"mappings":"AAYA,OAAOA,SAAQ,MAAO,4BAA4B;AAClD,OAAOC,SAAQ,MAAO,4BAA4B;AAElD,eAAe;EACXC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACRH,SAAS;IACTC;EACJ,CAAC;EACDG,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,KAAK,EAAE,EAAE;MACTC,YAAY,EAAE;QACZC,WAAW,EAAE,EAAE;QACfC,eAAe,EAAE;MACnB,CAAC;MACDC,SAAS,EAAEC,GAAG;MACdC,MAAM,EAAE;IACZ,CAAC;EACL,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,QAAQ,CAAC,CAAC;EACjB,CAAC;EACDC,QAAQ,EAAE;IACRC,IAAIA,CAAA,EAAG;MACL,OAAOV,KAAK,CAAC,IAAI,CAACI,SAAS;IAC7B;EACF,CAAC;EACDO,OAAO,EAAE;IACL,MAAMH,QAAQA,CAAA,EAAG;MACb,IAAII,GAAE,GAAI,MAAMC,KAAK,CAAC,YAAY,CAAC;MACnC,IAAId,IAAG,GAAI,MAAMa,GAAG,CAACE,IAAI,CAAC,CAAC;MAE3B,IAAI,CAACd,KAAI,GAAID,IAAI;IACrB,CAAC;IACDgB,SAASA,CAAClB,IAAI,EAAEmB,IAAI,EAAE;MACpB,IAAI,CAAChB,KAAK,CAACiB,OAAO,CAAC,CAACP,IAAI,EAAEQ,KAAK,KAAK;QAClC,IAAIC,YAAW,GAAI,KAAK;QACxB,IAAI,CAACT,IAAI,CAACU,KAAI,IAAKvB,IAAG,IAAKa,IAAI,CAACW,WAAU,IAAKxB,IAAI,KAAKa,IAAI,CAACY,QAAO,IAAKN,IAAI,EAAE;UAC7E,IAAI,CAACZ,SAAQ,GAAIc,KAAK;UACtBC,YAAW,GAAI,IAAI;QACrB;QAEA,IAAG,CAACA,YAAY,EAAE;UAChBI,KAAK,CAAC,iBAAiB;QACzB,OAAO;UACL,IAAI,CAACjB,MAAK,GAAI,CAAC;QACjB;MACF,CAAC;IACH;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}